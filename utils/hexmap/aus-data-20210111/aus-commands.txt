
In aus-data-YYYYMMDD dir:

gawk -F',' '$1>=1 && $1<=999 {out_file="aus-"$1"-reflectancePC-300-1-700.csv"; for (i=0;i<=400;i++) {printf("%i,%f\n",300+i,$(i+7)) >> out_file};}' AusData_interim-final_20201216.csv

gawk -F',' '$1>0 && $1<999 {L=300; out_file = "aus-" $1 "-reflectance-300-10-650.csv"; for (i=7;i<=357;i=i+10) {print L "," $i/100.0 >> out_file; L=L+10}}' AusData_interim-final_20201216.csv

gawk -F',' '$1>0 && $1<999 {print $1}' AusData_interim-final_20201216.csv > aus-ids.txt

In hexmap dir:

for S in `cat aus-data-20201216/aus-ids.txt`; do ./calc-hex-pos aus-data-20201216/aus-data/reflectance-300-10-650/aus-$S-*.csv $S; done | tee aus-data-20201216/aus-hex-pos-data.csv

gawk -F',' '{cmd="./calc-dom-lambda -v "$5" "$6; while ( ( cmd | getline result ) > 0 ) {print $1", "result;}; close(cmd);}' aus-data-20201216/aus-hex-pos-data.csv | tee aus-data-20201216/aus-dom-wavelength-data.csv

In aus-data-YYYYMMDD dir:

gawk -F',' 'NF>4 {print}' aus-dom-wavelength-data.csv > aus-dom-wavelength-data-ex-no-dom.csv


#### GRID-BASED SAMPLING

# this samples from a 0.055x0.055 square grid from the aus-dom-wavelength-data-ex-no-dom.csv data
for N in `seq 1 10`; do ./pick-aus-samples > aus-sample-$N.csv; done

# place the samples in their own dirs
mkdir samples
cd samples
for N in `seq 1 10`; do mkdir sample-$N; mv ../aus-sample-$N.csv sample-$N; done

# generate ID files for each sample
for N in `seq 1 10`; do cd sample-$N; cut -d',' -f1 aus-sample-$N.csv > aus-sample-$N-ids.txt; cd ..; done

## For each entry in a given sample, calculate the dominant wavelength and output a CSV file that contains this

In sample-1 dir:

# Step 0...
gawk -F',' '{cmd="../../calc-dom-lambda -v "$2" "$3; while ( ( cmd | getline result ) > 0 ) {print $1", "result;}; close(cmd);}' aus-sample-1.csv | tee aus-dom-wavelength-data-sample-1.csv

## Generate JSON vis-data format 

# Step 1....
# outputs lines of the form [1, 367, 1, 0.0, -0.417777, -0.043089, -0.670720, -0.069177, 0.05, 4040],)
sort -t',' -k2 aus-dom-wavelength-data-sample-1.csv | gawk -F',' 'BEGIN {N=1;} $4!=" OUT_OF_RANGE" {printf("[%i, %3.0f, 1, 0.0, %f, %f, %f, %f, 0.05, %i],\n",N,$2,$3,$4,$12,$13,$1);N++;}' > aus-dom-wavelength-data-sample-1-detect-all-config.json


## Augment the JSON data with green contrast and detection data

# the following uses bash string substitution ${L%]} to remove the ] character from the end
# of the string - see https://tldp.org/LDP/abs/html/string-manipulation.html

# Step 2....
for L in `cut -d',' -f10 aus-dom-wavelength-data-sample-1-detect-all-config.json`; do grep "^"${L%]}"," ../../aus-hex-pos-data.csv | gawk -F',' '{D=sqrt($5*$5+$6*$6); if (($4>=0.4 && $4<=0.6) || (D<0.11)) {PD=0} else {PD=1}; print $1","$4","$5","$6","PD;}'; done > aus-sample-1-detection-data.csv

# Step 3....
for M in `cut -d',' -f10 aus-dom-wavelength-data-sample-1-detect-all-config.json`; do L=${M%]}; A=`grep "^"$L"," aus-sample-1-detection-data.csv`; echo -n $A", "; grep " "$L"]" aus-dom-wavelength-data-sample-1-detect-all-config.json; done | gawk -F',' '{print $6","$7", "$5", "$2","$10","$11","$12","$13","$14","$15","}' > aus-dom-wavelength-data-sample-1-detect-restricted-config.json

## Generate JSON PlantType sections

# Step 4...
for L in `gawk -F',' '{sub(/\[/,"",$1); print $1}' aus-dom-wavelength-data-sample-1-detect-restricted-config.json`; do echo '        "PlantTypeDW'$L'" : {'; echo '            "species" : "PlantTypeDW'$L'",'; echo '            "flower-vis-data-id" : '$L','; echo '            "anther-init-pollen" : 100,'; echo '            "anther-pollen-transfer-per-visit" : 1,'; echo '            "stigma-max-pollen-capacity" : 5,'; echo '            "pollen-clogging" : "",'; echo '            "repro-seed-dispersal-global" : false,'; echo '            "repro-seed-dispersal-radius-stddev" : 2.0,'; echo '            "init-nectar" : 100'; echo '        },'; done > plant-types.json

-----------------------------------
Steps 0-4 above combined, for all samples:

for N in `seq 1 30`; do cd sample-$N; gawk -F',' '{cmd="../../../calc-dom-lambda -v "$2" "$3; while ( ( cmd | getline result ) > 0 ) {print $1", "result;}; close(cmd);}' aus-sample-$N.csv | tee aus-dom-wavelength-data-sample-$N.csv; sort -t',' -k2 aus-dom-wavelength-data-sample-$N.csv | gawk -F',' 'BEGIN {N=1;} $4!=" OUT_OF_RANGE" {printf("[%i, %3.0f, 1, 0.0, %f, %f, %f, %f, 0.05, %i],\n",N,$2,$3,$4,$12,$13,$1);N++;}' > aus-dom-wavelength-data-sample-$N-detect-all-config.json; for L in `cut -d',' -f10 aus-dom-wavelength-data-sample-$N-detect-all-config.json`; do grep "^"${L%]}"," ../../aus-hex-pos-data.csv | gawk -F',' '{D=sqrt($5*$5+$6*$6); if (($4>=0.4 && $4<=0.6) || (D<0.11)) {PD=0} else {PD=1}; print $1","$4","$5","$6","PD;}'; done > aus-sample-$N-detection-data.csv; for M in `cut -d',' -f10 aus-dom-wavelength-data-sample-$N-detect-all-config.json`; do L=${M%]}; A=`grep "^"$L"," aus-sample-$N-detection-data.csv`; echo -n $A", "; grep " "$L"]" aus-dom-wavelength-data-sample-$N-detect-all-config.json; done | gawk -F',' '{print $6","$7", "$5", "$2","$10","$11","$12","$13","$14","$15","}' > aus-dom-wavelength-data-sample-$N-detect-restricted-config.json; for L in `gawk -F',' '{sub(/\[/,"",$1); print $1}' aus-dom-wavelength-data-sample-$N-detect-restricted-config.json`; do echo '        "PlantTypeDW'$L'" : {'; echo '            "species" : "PlantTypeDW'$L'",'; echo '            "flower-vis-data-id" : '$L','; echo '            "anther-init-pollen" : 100,'; echo '            "anther-pollen-transfer-per-visit" : 1,'; echo '            "stigma-max-pollen-capacity" : 5,'; echo '            "pollen-clogging" : "",'; echo '            "repro-seed-dispersal-global" : false,'; echo '            "repro-seed-dispersal-radius-stddev" : 2.0,'; echo '            "init-nectar" : 100'; echo '        },'; done > plant-types.json; cd ..; done


-----------------------------------



## Marker Point file generation

In sample-1 dir:  (actually maybe better to do this for all entries in DB in one go, not by individual samples...)

mkdir mp-data
cd mp-data
mkdir reflectance
mkdir curves
mkdir mps
cd reflectance
for N in `cat ../../aus-sample-1-ids.txt`; do cp ../../../../aus-data/reflectancePC-300-1-700/aus-$N-reflectancePC-300-1-700.csv .; done

Then feed all of these reflectance files into https://ecosim.infotech.monash.edu/SpectralMP/
(using Amplitude 20%, Smoothing 1)

In mp-data dir:

cd curves
unzip ~/Downloads/curves.zip
cd ..

cd mps
for F in `cat ../../aus-sample-1-ids.txt`; do gawk -F',' '{if ($5!="") {printf("%i\n",$1)}}' ../curves/aus-$F-reflectancePC-300-1-700.csv > aus-$F-reflectancePC-300-1-700-mps.txt; done


--> these aus-$F-*-mps.txt files are used by the script gen-mp-counts for generating graphs


# now sort out the samples with no marker points - Alan said to try this approach first (gmail 14/12/20)
mkdir no-mps
mkdir one-or-more-mps
mkdir all
for F in `find . -size 0`; do mv $F no-mps/; done
mv aus-* one-or-more-mps/
cd one-or-more-mps
cat * | sort > all-mps.txt
cd ..
cp no-mps/aus-* all/
cp one-or-more-mps/aus-* all/


## Now need to generate a sample-1x set (config.json and plant-types.json) that only includes those samples in the one-or-more-mps dir

(TODO)


## Create an MP-to-AUSID map file

In mps/all dir:

for N in {300..700}; do echo -n "$N"; grep "^$N\$" aus-*-mps.txt | gawk -F'-' '{printf(",%i",$2);} END {printf("\n");}'; done > mp-to-ausid-map.csv
mv mp-to-ausid-map.csv ..

## Create lists of all unique MPs in each sample

In samples dir:

MPDIR="/home/tim/evobee/code/evobee/utils/hexmap/aus-data-20210111/aus-data/mp-data/20-50-5-1/mps/all"
for N in {1..30}; do cd sample-$N; for A in `cat aus-sample-$N-ids.txt`; do cat $MPDIR/aus-$A-*; done|sort|uniq > aus-sample-$N-mps.txt; cd ..; done

---------------------------------------

## Generation of Giurfa preference mapping file

# produce file aus-giurfa-prefs.csv with format AUSID, DOM_LAMBDA, GIURFA_PREF_PC

GFILE="/home/tim/evobee/code/evobee/include/giurfa.h"

gawk -F, '{if ($2>0) {printf("%d, %d\n",$1,($2+0.499));}}' aus-dom-wavelength-data.csv > aus-giurfa-prefs-tmp.csv

while IFS=',' read -a ADDR; do for i in "${ADDR[@]}"; do echo -n $i", "; done; P="{$i,"; grep ${P/ /} $GFILE | head -1 | gawk -F, '{printf("%f\n",$2*2040.75);}'; done < aus-giurfa-prefs-tmp.csv > aus-giurfa-prefs.csv

---------------------------------------

## Generation of run config files

SDIR=/home/tim/evobee/code/evobee/utils/hexmap/aus-data-20210111/samples

for S in `seq 1 30`; do cat aus-data-20210111-batch-1-sample-N.json-template-part1 $SDIR/sample-$S/aus-dom-wavelength-data-sample-$S-detect-restricted-config.json aus-data-20210111-batch-1-sample-N.json-template-part2 | gawk -vS=$S '/sample-1/ {sub(/sample-1/,"sample-"S,$0)} /\[92/ {sub(/\],/,"]",$0)} {print}' > aus-data-20210111-batch-1-sample-$S.cfg.json; done

