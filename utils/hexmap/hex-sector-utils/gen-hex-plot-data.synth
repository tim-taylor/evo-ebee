#!/bin/bash
#
# Script to generate data file suitable for plotting hex space and sector plots
#
# Takes a log file generated by an evobee and a generation number, and 
# outputs (to stdout) lines of the format:
#   ausid, hex_x, hex_y, hex_sector_theta, num_flowers, num_pollinated, num_landings, dom_lambda, giurfa_pref
# 
# Call with
# > ./gen-hex-plot-data logfilename generation [giurfa|flat] [angleconvention] [flipx]
# where
#  logfilename is a log file generated by an evobee run
#  generation is the generation number to produce data for
#  giurfa|flat specifies whether the pollinator preferences are determined by Giurfa data or flat
#  angleconvention specifies how to label angles for hex sector plot:
#    1 = +ve x axis (3 o'clock) is 0 degrees and go anticlockwise [default]
#    2 = +ve y axis (12 o'clock) is 0 degrees and go clockwise
#  flipx if specified, reverse sign of x coordinate of points when reading from $FDIR/$FDATA
#

FDIR="/home/tim/evobee/code/evobee/utils/hexmap/synth-data"
FDATA="vis-data-synth-lc-on.json"
PDATA="synth-giurfa-prefs.csv"

if [ $# -lt 2 ] || [ $# -gt 5 ] ; then
    echo "Usage: gen-hex-plot-data.synth logfilename generation [giurfa|flat] [angleconvention=1,2] [flipx]"
    exit
fi

LOG="$1"
GEN="$2"

if [ $# -ge 3 ]; then
    PTYPE="$3"
else
    PTYPE="giurfa"
fi

if [ $# -ge 4 ]; then
    AC="$4"
else
    AC="1"
fi

if [ $# -ge 5 ]; then
    FLIPX="T"
else
    FLIPX="F"
fi

# build up $INFO as a space separated list of info about each flower species
# where each entry is of the form "ID,NUMFLOWERS,NUMPOLLINATED,NUMLANDINGS"
INFO=`gawk -F',' -vGEN=$GEN '$1=="n" && $2==GEN {printf("%d,%d,%d,%d ",$9,$7,$8,$11)}' $LOG`

# now loop through each entry in $INFO
#
# FROM ID we need to get XCO, YCO, PREF, DOML
#   XCO -> JSON FIELD 5 (0-based -> 4)
#   YCO -> JSON FIELD 6 (0-based -> 5)
#   DOML -> JSON FIELD 2 (0-based -> 1)
#   PREF(GIURFA) -> Giurfa pref is associated with the DOML -> get from synth-giurfa-prefs.csv
#
for INF in $INFO; do

    FLD=(${INF//,/ })
    ID=${FLD[0]}
    NUM=${FLD[1]}
    POL=${FLD[2]}
    LND=${FLD[3]}
    
    XTRA=`grep "^\[$ID," $FDIR/$FDATA`
    # remove spaces
    XTRA=${XTRA// /}
    # now change commas to spaces, so list is now single-space-separated 
    XFLD=(${XTRA//,/ })
    XCO1=${XFLD[4]}
    YCO=${XFLD[5]}
    
    if [ $FLIPX == "T" ]; then
        XCO=`calc -d "(-1.0*$XCO1)"`
    else
        XCO=$XCO1
    fi    
    
    PXTR=`grep "^$ID," $FDIR/$PDATA`
    # remove spaces
    PXTR=${PXTR// /}
    # now change commas to spaces, so list is now single-space-separated
    PFLD=(${PXTR//,/ })
    DOML=${PFLD[1]}
    
    if [ $PTYPE == "giurfa" ]; then
        if [ $FLIPX == "T" ]; then
            PREF="0"
        else
            PREF=${PFLD[2]}
        fi
    else
        PREF="10"
    fi    

    # calculate angle of point from upper vertical axis in hex space
    # (converted from radians to degrees)
    
    if [ "${YCO:0:3}" == "0.0" ] || [ "${YCO:0:4}" == "-0.0" ]; then
        if [ "${XCO:0:1}" != "-" ]; then
            SEC="90.0"
        else
            SEC="270.0"
        fi
    else
        SEC=`calc -d "atan($XCO/$YCO)*57.29577951307855"`
    fi    
        
    if [ "${XCO:0:1}" != "-" ] && [ "${YCO:0:1}" == "-" ]; then
        SEC=`calc -d "180.0+$SEC"`
    elif [ "${XCO:0:1}" == "-" ] && [ "${YCO:0:1}" == "-" ]; then
        SEC=`calc -d "180.0+$SEC"`
    elif [ "${XCO:0:1}" == "-" ] && [ "${YCO:0:1}" != "-" ]; then
        SEC=`calc -d "360.0+$SEC"`
    fi
    
    if [ "$AC" == "2" ]; then
        NSEC="$SEC"
    else
        NSEC=`calc -d "mod((360.0-$SEC)+90.0,360.0)"`
    fi
    
    printf "%d, %.5f, %.5f, %.5f, %d, %d, %d, %d, %.3f\n" $ID $XCO $YCO $NSEC $NUM $POL $LND $DOML $PREF
    
done
