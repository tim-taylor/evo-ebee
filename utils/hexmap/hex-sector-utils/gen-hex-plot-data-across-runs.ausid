#!/bin/bash
#
# Script to generate data file suitable for plotting hex space and sector plots
#
# Takes a log file generated by an evobee and a generation number, and 
# outputs (to stdout) lines of the format:
#   ausid, hex_x, hex_y, hex_sector_theta, num_flowers, num_pollinated, num_landings, dom_lambda, giurfa_pref
# 
# Call with
# > ./gen-hex-plot-data-across-runs logfilename [giurfa|flat] [angleconvention=1,2]
# where
#  logfilename is a log file generated by an evobee run
#  giurfa|flat specifies whether the pollinator preferences are determined by Giurfa data or flat
#  angleconvention specifies how to label angles for hex sector plot:
#    1 = +ve x axis is 0 degrees and go anticlockwise [default]
#    2 = +ve y axis is 0 degrees and go clockwise
#

# ./gen-hex-plot-data-across-runs output-no-orchid/hex-plot-data-across-runs-gen-0.csv > no-orchid-hex-plot-data-gen-0.csv


FDIR="/home/tim/evobee/code/evobee/utils/hexmap/aus-data-20210111"
FDATA="aus-dom-wavelength-data.csv"
PDATA="aus-giurfa-prefs.csv"

if [ $# -lt 1 ] || [ $# -gt 3 ] ; then
    echo "Usage: gen-hex-plot-data-across-runs logfilename [giurfa|flat] [angleconvention=1,2]"
    exit
fi

LOG="$1"

if [ $# -ge 2 ]; then
    PTYPE="$2"
else
    PTYPE="giurfa"
fi

if [ $# -eq 3 ]; then
    AC="$3"
else
    AC="1"
fi


# The log file generated by gen-hex-sector-data-across-runs contains lines of the format
#    AUSID,NUMFLOWERS,NUMPOLLINATED,NUMLANDINGS
# We now go through the log file one line at a time, parsing the data and supplementing
# it with additional information relating to the given flower
for INF in `cat $LOG`; do

    FLD=(${INF//,/ })
    ID=${FLD[0]}
    NUM=${FLD[1]}
    POL=${FLD[2]}
    LND=${FLD[3]}
    
    XTRA=`grep "^$ID," $FDIR/$FDATA`
    # remove spaces
    XTRA=${XTRA// /}
    # now change commas to spaces, so list is now single-space-separated 
    XFLD=(${XTRA//,/ })
    XCO=${XFLD[2]}
    YCO=${XFLD[3]}

    if [[ $YCO == "OUT_OF_RANGE" ]]; then
        continue
    fi

    PXTR=`grep "^$ID," $FDIR/$PDATA`
    # remove spaces
    PXTR=${PXTR// /}
    # now change commas to spaces, so list is now single-space-separated
    PFLD=(${PXTR//,/ })
    DOML=${PFLD[1]}
    
    if [ $PTYPE == "giurfa" ]; then
        PREF=${PFLD[2]}
    else
        PREF="10"
    fi

    # calculate angle of point from upper vertical axis in hex space
    # (converted from radians to degrees)
    
    SEC=`calc -d "atan($XCO/$YCO)*57.29577951307855"`
    
    if [ "${XCO:0:1}" != "-" ] && [ "${YCO:0:1}" == "-" ]; then
        SEC=`calc -d "180.0+$SEC"`
    elif [ "${XCO:0:1}" == "-" ] && [ "${YCO:0:1}" == "-" ]; then
        SEC=`calc -d "180.0+$SEC"`
    elif [ "${XCO:0:1}" == "-" ] && [ "${YCO:0:1}" != "-" ]; then
        SEC=`calc -d "360.0+$SEC"`
    fi
    
    if [ "$AC" == "2" ]; then
        NSEC="$SEC"
    else
        NSEC=`calc -d "mod((360.0-$SEC)+90.0,360.0)"`
    fi

    printf "%d, %.5f, %.5f, %.5f, %d, %d, %d, %d, %.3f\n" $ID $XCO $YCO $NSEC $NUM $POL $LND $DOML $PREF
    
done
